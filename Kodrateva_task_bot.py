import telebot
from telebot import types

bot = telebot.TeleBot('7594244287:AAE_AAc_XbPtlFXy4iyX0-orm5QxsmsmQgU')
tasks = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"))
    markup.add(types.KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"))
    markup.add(types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"))
    
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
def add_task(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, process_task_text)

def process_task_text(message):
    chat_id = message.chat.id
    task_text = message.text

    user_tasks = tasks.get(chat_id, [])
    user_tasks.append(task_text)
    tasks[chat_id] = user_tasks

    bot.send_message(chat_id, f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")

@bot.message_handler(func=lambda message: message.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
def show_tasks(message):
    chat_id = message.chat.id
    user_tasks = tasks.get(chat_id, [])

    if not user_tasks:
        bot.send_message(chat_id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        return

    task_list_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
    for i, task in enumerate(user_tasks):
        task_list_text += f"{i + 1}. {task}\n"
    bot.send_message(chat_id, task_list_text)

@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
def delete_task(message):
    chat_id = message.chat.id
    user_tasks = tasks.get(chat_id, [])

    if not user_tasks:
        bot.send_message(chat_id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return

    task_list_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
    for i, task in enumerate(user_tasks):
        task_list_text += f"{i + 1}. {task}\n"
    bot.send_message(chat_id, task_list_text + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, process_delete_number)

def process_delete_number(message):
    chat_id = message.chat.id
    user_tasks = tasks.get(chat_id, [])

    try:
        task_number = int(message.text)
        if 1 <= task_number <= len(user_tasks):
            deleted_task = user_tasks.pop(task_number - 1)
            tasks[chat_id] = user_tasks
            bot.send_message(chat_id, f"–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted_task}")
        else:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")

if __name__ == '__main__':
    bot.infinity_polling()
